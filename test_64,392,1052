	public boolean isSubsequence(String s, String t) {
		int n = s.length(), m = t.length(),x=0;
		boolean[] dp = new boolean[n+1];
		dp[0]=true;
		for(int j=0;j<n;j++) {
		for(int i=x;i<m;i++) {
				if(s.charAt(j)==t.charAt(i)&&dp[j]==true) {
					dp[j+1]=true;
					x=i+1;
					break;
				}
			}
		}
		return dp[n];
	}
	
    public boolean divisorGame(int N) {
    	if(N==1)return false;
    	boolean[] dp=new boolean[N+1];
    	dp[1]=false;
    	dp[2]=true;
     for(int i=3;i<=N;i++) {
    	 dp[i]=false;
    	 for(int j=1;j<i;j++) {
    		 if(i%j==0 && !dp[i-j]) {
    			 dp[i]=true;
    		 }			 
    	 }
     }
//     for(int x=0;x<dp.length;x++) {
//    	 System.out.println(x+" "+dp[x]);
//     }
	return dp[N];
    }
	
    public int minPathSum(int[][] grid) {
    	int column=grid.length,row=grid[0].length;
    	if(column==0||grid==null||column==0)return 0;
    	int [][] dp=new int[column][row];
    	dp[0][0]=grid[0][0]; 
    	for(int i=1;i<row;i++) {dp[0][i]=dp[0][i-1]+grid[0][i];};
    	for(int j=1;j<column;j++) {dp[j][0]=dp[j-1][0]+grid[j][0];};
    	for(int i=1;i<column;i++) {
    		for(int j=1;j<row;j++) {
    			dp[i][j]=(dp[i-1][j]>dp[i][j-1]?dp[i][j-1]:dp[i-1][j])+grid[i][j];
    		}
    	}
    	for(int i=0;i<dp.length;i++) {
    		for(int j=0;j<dp[i].length;j++) {
    			System.out.print(dp[i][j]+" ");
    		}
    		System.out.println();
    	}
    	return dp[column-1][row-1];
    }
    
    ---------------------------------------
    给定字符串 s 和 t ，判断 s 是否为 t 的子序列。
你可以认为 s 和 t 中仅包含英文小写字母。字符串 t 可能会很长（长度 ~= 500,000），而 s 是个短字符串（长度 <=100）。
字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，"ace"是"abcde"的一个子序列，而"aec"不是）。
示例 1:
s = "abc", t = "ahbgdc"
返回 true.
示例 2:
s = "axc", t = "ahbgdc"
返回 false.
-----------------------------------------------------
爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。
最初，黑板上有一个数字 N 。在每个玩家的回合，玩家需要执行以下操作：
选出任一 x，满足 0 < x < N 且 N % x == 0 。
用 N - x 替换黑板上的数字 N 。
如果玩家无法执行这些操作，就会输掉游戏。
只有在爱丽丝在游戏中取得胜利时才返回 True，否则返回 false。假设两个玩家都以最佳状态参与游戏。
示例 1：输入：2输出：true
解释：爱丽丝选择 1，鲍勃无法进行操作。
示例 2：输入：3输出：false
解释：爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。
提示：1 <= N <= 1000

------------------------------------------------------
给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
说明：每次只能向下或者向右移动一步。
示例:
输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-depth-of-binary-tree
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

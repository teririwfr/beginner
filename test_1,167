    public static int[] twoSum2(int[] numbers, int target) {
    	int len=numbers.length;
    	Map<Integer,Integer> map=new HashMap<>();
    	for(int i=0;i<len;i++) {
    		if(map.containsKey(target-numbers[i])) {
    			return new int[]{map.get(target-numbers[i]+1),i+1};
    		}
    		map.put(numbers[i],i);
    	}
		return new int[]{-1,-1};
    }
	
    public static int[] twoSum(int[] nums, int target) {
    	int len=nums.length;
    	Map<Integer,Integer> map=new HashMap<>();
    	for(int i=0;i<len;i++) {
    		if(map.containsKey(target-nums[i])) {
    			return new int[]{map.get(target-nums[i]),i};
    		}
    		map.put(nums[i],i);
    	}
		return new int[]{-1,-1};
    }
 ---------------------------------------------------------

给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。
函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。
说明:
返回的下标值（index1 和 index2）不是从零开始的。
你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。
示例:
输入: numbers = [2, 7, 11, 15], target = 9
输出: [1,2]
解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。

------------------------------------------------------
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。
示例:
给定 nums = [2, 7, 11, 15], target = 9
因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

同上个文件
-----------------------------------------

	 public static class TreeNode {
	     int val;
	     TreeNode left;
	     TreeNode right;
	     TreeNode(int x) { val = x; }
	 }
	 public static TreeNode createTree() {
		 TreeNode root=new TreeNode(3);
		  root.left=new TreeNode(9);
		  root.right=new TreeNode(20);
		  root.right.left=new TreeNode(15);
		  root.right.right=new  TreeNode(7);
		  return root;
	 }
	  public static void main(String args[]) {
		  Tree tree=new Tree();
//			104
 	  		System.out.println(tree.maxDepth(createTree()));		
//		  107
		  List<List<Integer>> list=tree.levelOrderBottom(createTree());
		  for(int i=0;i<list.size();i++) {
			  for(int j=0;j<list.get(i).size();j++) {
				  System.out.print(list.get(i).get(j)+" ");
			  }
			  System.out.println();
		  }
      
	  }
	  
	  
//107	   
	    public List<List<Integer>> levelOrderBottom(TreeNode root) {
	    	List<List<Integer>> ans=new ArrayList<>();
//	    	判断是否为空
	    	if(root==null) {return ans ;}
//	    	创建栈
	    	Queue<TreeNode> q=new LinkedList<>();
//	    	将根节点添加到栈中
	    	q.offer(root);
//	    	循环
	    	while(!q.isEmpty()) {
	    		List<Integer> tmp=new ArrayList<>();
//	    		len等于子节点数
	    		int len=q.size();
	    		for(int i=0;i<len;i++) {
//	    			移除父节点
	    			TreeNode node=q.poll();
	    			tmp.add(node.val);
//	    			判断子节点是否有子节点，有添加到栈中
	    			if(node.left!=null) {q.add(node.left);}
	    			if(node.right!=null) {q.add(node.right);}
	    		}
	    		ans.add(0,tmp);
	    	}
			return ans;
	    }	  
 
//	  	104
	    public int maxDepth(TreeNode root) {
	 			深度优先搜索
	    	if(root==null) {return 0;};
			return Math.max(maxDepth(root.left), maxDepth(root.right))+1;
	    }
	  
	    public int maxDepth(TreeNode root) {
	    	广度优先搜索
	        if (root == null) {
	            return 0;
	        }
	        Queue<TreeNode> queue = new LinkedList<TreeNode>();
	        queue.offer(root);
	        int ans = 0;
	        while (!queue.isEmpty()) {
	            int size = queue.size();
	            while (size > 0) {
	                TreeNode node = queue.poll();
	                if (node.left != null) {
	                    queue.offer(node.left);
	                }
	                if (node.right != null) {
	                    queue.offer(node.right);
	                }
	                size--;
	            }
	            ans++;
	        }
	        return ans;
	    }

//      343
    public static int integerBreak(int n) {
    	if(n==2) {return 1;}
    	if(n==3) {return 2;}
    	if(n%3==0) {
    		return (int) Math.pow(3, n/3);
    	}else if(n%3==1) {
    		return (int) Math.pow(3, (n/3)-1)*4;
    	}else {
    		return (int) Math.pow(3, n/3)*2;
    	}
    }
    
    
    
    
 ---------------------------------------------------
给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。
示例 1:									343-test
输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1。
示例 2:
输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。

---------------------------------------------------
给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）
例如：
给定二叉树 [3,9,20,null,null,15,7],		107-Tree
    3
   / \
  9  20
    /  \
   15   7
返回其自底向上的层次遍历为：
[
  [15,7],
  [9,20],
  [3]
]

---------------------------------------------------
给定一个二叉树，找出其最大深度。		104-Tree
二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。
说明: 叶子节点是指没有子节点的节点。
示例：
给定二叉树 [3,9,20,null,null,15,7]，
    3
   / \
  9  20
    /  \
   15   7
返回它的最大深度 3 。



来自LeetCode

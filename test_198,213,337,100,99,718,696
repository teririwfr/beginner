
/**		99	  
		static TreeNode frist=null;
		static TreeNode last=null;
		static TreeNode ls=new TreeNode(Integer.MIN_VALUE);
	    public static void recoverTree(TreeNode root) {
	    	TreeNode endTree=root;
	        cl(root);
	        int tmp=frist.val;
	        frist.val=last.val;
	        last.val=tmp;
	        System.out.println();
	        System.out.println(frist.val+" "+last.val);
	        cl(endTree);
	    }
	    public static void cl(TreeNode root) {
			if(root==null) {return;}
			cl(root.left);
//			找出中序遍历中 的逆序对 frist=逆序对前面的值
			if(frist==null&&ls.val>root.val) {frist=ls;}
//			找出中序遍历中 的逆序对 last=逆序对后的值	
//			如果一个逆序对last会被替换一次如果两个逆序对last会被替换两次
			if(frist!=null&&ls.val>root.val) {last=root;}
			ls=root;
			System.out.print(ls.val);
			cl(root.right);
		}
*/
/**		100
		 public static boolean isSameTree(TreeNode p, TreeNode q) {
//		 	递归
			 if(p==null&&q==null) {return true;}
			 if(p!=null&&q==null) {return false;}
			 if(p==null&&q!=null) {return false;}	
			 if(p.val!=q.val) {return false;}
			 return isSameTree(p.left, q.left)&&isSameTree(p.right, q.right);
		 }
		 public static boolean isSameTree2(TreeNode p, TreeNode q) {
//		 	层次遍历
	    	if(p==null&&q==null) {return true;}
	    	else if(p!=null&&q!=null) {}
	    	else{return false;}
	    	Queue<TreeNode> queue1=new LinkedList<TreeNode>();
	    	Queue<TreeNode> queue2=new LinkedList<TreeNode>();
	    	queue1.offer(p);
	    	queue2.offer(q);
	    	while(!queue1.isEmpty()||!queue2.isEmpty()) {
	    		TreeNode ls1=queue1.poll();
	    		TreeNode ls2=queue2.poll();
	    		if(ls1.val!=ls2.val) {return false;}
	    		if(ls1.left!=null&&ls2.left!=null) 
	    		{queue1.add(ls1.left);
	    		queue2.add(ls2.left);}
	    		else if((ls1.left==null&&ls2.left!=null)||(ls2.left==null&&ls1.left!=null)) {
	    			return false;
	    		}
	    		if(ls2.right!=null&&ls1.right!=null)
	    		{queue2.add(ls2.right);
	    		queue1.add(ls1.right);}	    		
	    		else if((ls1.right==null&&ls2.right!=null)||(ls2.right==null&&ls1.right!=null)) {
	    			return false;
	    		}
	    	}	    	
	    	return true;
	    }
*/		 
/**		337
		public static int rob(TreeNode root) {
		int[] arr=clrob(root);	
		return Math.max(arr[0], arr[1]);
		}
		public static int[] clrob(TreeNode root) {
			if(root==null) {return new int[] {0,0};}
//			left=左节点偷与不偷
			int[] left=clrob(root.left);
//			right=右节点偷与不偷			
			int[] right=clrob(root.right);
//			x0=不偷
			int x0=left[1]+right[1]+root.val;
//			x1=偷
			int x1=Math.max(left[0],left[1])+Math.max(right[0], right[1]);
			return new int[]{x0,x1};
		}
*/	  


    public int countBinarySubstrings(String s) {
//    	696
    	int one=0,zero=0,sum=0;
    	boolean db=true;
    	for(int i=0;i<s.length();i++) {
    		if(s.charAt(i)=='0') {
    			if(db==false) {db=true;zero=0;}
    			zero++;
    			if(zero<=one) {sum++;}
    		}else {
    			if(db==true) {db=false;one=0;}
    			one++;
    			if(one<=zero) {sum++;}
    		}		
    	} 	
    	return sum;
    }
	
    public int findLength(int[] A, int[] B) {
//    	718
    	int lena=A.length,lenb=B.length,sum=0;
    	int [][] dp=new int[lena+1][lenb+1];
    	for(int i=lena-1;i>=0;i--) {
    		for(int j=lenb-1;j>=0;j--) {
    			dp[i][j]=A[i]==B[j]?dp[i+1][j+1]+1:0;
    			sum=Math.max(sum, dp[i][j]);
    		}
    	}	
    	return sum;
//    	将dp由二维优化为一维
//        public static int findLength_2(int[] A, int[] B) {
//        	int lena=A.length,lenb=B.length,sum=0;
//        	int[] dp=new int[lenb+1];
//        	for(int i=1;i<=lena;i++) {
//        		for(int j=lenb;j>=1;j--) {
//        			dp[j]=A[i-1]==B[j-1]?dp[j-1]+1:0;
//        			sum=Math.max(sum, dp[j]);
//        		}
//        	}	
//        	return sum;
//        }
    }

	
    public int rob2(int[] nums) {
//    	213
    	if(nums==null||nums.length==0) {return 0;}
    	if(nums.length==1) {return nums[0];}	    	
    	return Math.max(clrob(Arrays.copyOfRange(nums, 0, nums.length-1))
    			,clrob(Arrays.copyOfRange(nums, 1, nums.length)));
    }
    public int clrob(int[] nums) {
    	int frist=0,end=0;
    	for(int i=0;i<nums.length;i++) {
    		int ls=end;
    		end=Math.max(end, frist+nums[i]);
    		frist=ls;
    	}
    	return end;
    }
	
	 public  int rob(int[] nums) {
//		 198
		 if(nums==null||nums.length==0) {return 0;}
		 int len=nums.length;
		 if(len==1) {return nums[0];}
		 int[] dp=new int[len];
		 dp[0]=nums[0];
		 dp[1]=Math.max(nums[0], nums[1]);
		 for(int i=2;i<len;i++) {
			 dp[i]=Math.max(dp[i-1],dp[i-2]+nums[i]);
		 }
		 return dp[len-1];
	 }


-------------------------------------------------------
给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。
重复出现的子串要计算它们出现的次数。
示例 1 :				696
输入: "00110011"
输出: 6
解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。
请注意，一些重复出现的子串要计算它们出现的次数。
另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。
示例 2 :
输入: "10101"
输出: 4
解释: 有4个子串：“10”，“01”，“10”，“01”，它们具有相同数量的连续1和0。

------------------------------------------------------
给两个整数数组 A 和 B ，返回两个数组中公共的、长度最长的子数组的长度。
示例：				718
输入：
A: [1,2,3,2,1]
B: [3,2,1,4,7]
输出：3
解释：
长度最长的公共子数组是 [3, 2, 1] 。

-----------------------------------------------------
二叉搜索树中的两个节点被错误地交换。
请在不改变其结构的情况下，恢复这棵树。
示例 1:					99-Tree
输入: [1,3,null,null,2]
   1
  /
 3
  \
   2
输出: [3,1,null,null,2]
   3
  /
 1
  \
   2
示例 2:
输入: [3,1,4,null,null,2]
  3
 / \
1   4
   /
  2
输出: [2,1,4,null,null,3]
  2
 / \
1   4
   /
  3

--------------------------------------------------
给定两个二叉树，编写一个函数来检验它们是否相同。
如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。
示例 1:							100-Tree
输入:      	   1         1
          / \       / \
         2   3     2   3
        [1,2,3],   [1,2,3]
输出: true
示例 2:
输入:              1             1
          /           \
         2             2
        [1,2],     [1,null,2]
输出: false
示例 3:
输入:      	   1         1
          / \       / \
         2   1     1   2
        [1,2,1],   [1,1,2]
输出: false

-----------------------------------------------------
在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。
这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。
一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。
 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。
计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。
示例 1:						337-Tree
输入: [3,2,3,null,3,null,1]
     3
    / \
   2   3
    \   \ 
     3   1
输出: 7 
解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.
示例 2:
输入: [3,4,5,1,3,null,1]
     3
    / \
   4   5
  / \   \ 
 1   3   1
输出: 9
解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9.

-------------------------------------------------
你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，
这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
示例 1:						213
输入: [2,3,2]
输出: 3
解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
示例 2:
输入: [1,2,3,1]
输出: 4
解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。
     
--------------------------------------------------
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素
就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。
示例 1：						198
输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2：
输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 


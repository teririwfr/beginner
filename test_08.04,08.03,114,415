
    public String addStrings(String num1, String num2) {
        StringBuilder res = new StringBuilder("");
        int i = num1.length() - 1, j = num2.length() - 1, carry = 0;
        while(i >= 0 || j >= 0){
            int n1 = i >= 0 ? num1.charAt(i) - '0' : 0;
            int n2 = j >= 0 ? num2.charAt(j) - '0' : 0;
            int tmp = n1 + n2 + carry;
            carry = tmp / 10;
            res.append(tmp % 10);
            i--; j--;
        }
        if(carry == 1) res.append(1);
        return res.reverse().toString();
    }
	
  	    public TreeNode flatten(TreeNode root) {
	    	TreeNode tn=root;
	        while(root!=null) {
	        	if(root.left==null) {
	        		root=root.right;
	        	}else {
	        		TreeNode ls=root.left;
	        		while(ls.right !=null) {
	        			ls=ls.right;
	        		}
	        		ls.right=root.right;
	        		root.right=root.left;
	        		root.left=null;
	        		root=root.right;
	        	}
	        }
	        return tn;
	    }	
  
    public int findMagicIndex(int[] nums) {
    	for(int i=0;i<nums.length;i++) {
    		if(nums[i]==i)return i;
    	}
    	return -1;
    }
	
    public List<List<Integer>> subsets(int[] nums) {
    	List<List<Integer>> lists=new ArrayList<>();
    	cl(lists,new ArrayList<>(),nums,0);
    return lists;
    }
    static void cl(List<List<Integer>> lists, ArrayList<Integer> arrayList, int[] nums,int start) {
    	
        lists.add(new ArrayList<>(arrayList));
        for(int i = start;i<nums.length;i++) {
            arrayList.add(nums[i]);
            cl(lists, arrayList, nums, i + 1);
            arrayList.remove(arrayList.size() - 1);
        }
    }
    
--------------------------------------------------
给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和。
注意：							415
num1 和num2 的长度都小于 5100.
num1 和num2 都只包含数字 0-9.
num1 和num2 都不包含任何前导零。
你不能使用任何內建 BigInteger 库， 也不能直接将输入的字符串转换为整数形式。

--------------------------------------------------
给定一个二叉树，原地将它展开为一个单链表。
例如，给定二叉树				114-Tree
    1
   / \
  2   5
 / \   \
3   4   6
将其展开为：
1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6

--------------------------------------------------
魔术索引。 在数组A[0...n-1]中，有所谓的魔术索引，满足条件A[i] = i。
给定一个有序整数数组，编写一种方法找出魔术索引，若有的话，在数组A中找出一个魔术索引，如果没有，则返回-1。若有多个魔术索引，返回索引值最小的一个。
示例1:							08.03
 输入：nums = [0, 2, 3, 4, 5]		
 输出：0
 说明: 0下标的元素为0
示例2:
 输入：nums = [1, 1, 1]
 输出：1
 
--------------------------------------------------
幂集。编写一种方法，返回某集合的所有子集。集合中不包含重复的元素。
说明：解集不能包含重复的子集。		08.04
示例:								未搞懂
 输入： nums = [1,2,3]
 输出：
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
